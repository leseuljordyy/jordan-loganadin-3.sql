--Requêtes simples--
Question 1:
SELECT NOM_JOUEUR, PRENOM_JOUEUR 
FROM JOUEUR
WHERE JOUEUR.NOM_JOUEUR LIKE '_e%';
Question 2:
SELECT NOM_JOUEUR, ADRESSE_JOUEUR 
FROM JOUEUR
WHERE JOUEUR.ADRESSE_JOUEUR LIKE '%PARIS%';
Question 3:
SELECT NOM_JOUEUR, PRENOM_JOUEUR 
FROM JOUEUR
WHERE PRENOM2_JOUEUR = NULL AND PRENOM3_JOUEUR = NULL;
Question 4:
SELECT  NOM_JOUEUR, PRENOM_JOUEUR, PRENOM2_JOUEUR, PRENOM3_JOUEUR 
FROM JOUEUR
WHERE PRENOM2_JOUEUR = NULL AND PRENOM3_JOUEUR = NOT NULL 
OR PRENOM2_JOUEUR = NOT NULL AND PRENOM3_JOUEUR = NULL;
Question 5:
SELECT * 
FROM JOUEUR
WHERE PRENOM_JOUEUR2 = NOT NULL AND PRENOM_JOUEUR = NOT NULL;
Question 6:
SELECT  NOM_JOUEUR, PRENOM_JOUEUR, AGE_JOUEUR 
FROM JOUEUR
WHERE AGE_JOUEUR = 17;
--Requêtes avec jointures--
Question 7:
SELECT NOM_RUE, NOM_COULEUR 
FROM RUE
INNER JOIN COULEUR ON RUE.ID_COULEUR = COULEUR.ID_COULEUR
WHERE COULEUR.NOM_COULEUR = 'Rouge';
Question 8:
SELECT NOM_MAIS, PRIX_MAIS, NOM_RUE 
FROM MAISON
INNER JOIN RUE ON MAISON.ID_RUE = RUE.ID_RUE
LIMIT 10;
Question 9:
SELECT PRENOM_JOUEUR, RUE.NOM_RUE, RUE.PRIX_RUE 
FROM JOUEUR
INNER JOIN RUE ON JOUEUR.ID_JOUEUR = RUE.ID_JOUEUR
WHERE PRENOM_JOUEUR = 'Carole';
Question 10:
SELECT PRENOM_JOUEUR, PION.FIGURINE 
FROM JOUEUR
INNER JOIN PION ON JOUEUR.ID_JOUEUR = PION.ID_JOUEUR
WHERE PRENOM_JOUEUR = 'Carole';
Question 11:
SELECT NOM_JOUEUR, PRENOM_JOUEUR, RUE.NOM_RUE
FROM JOUEUR
INNER JOIN RUE ON JOUEUR.ID_JOUEUR = RUE.ID_JOUEUR
LIMIT 6;
Question 12:
SELECT ID_CASE, NOM_CASE, LIBELLE_CASE, NOM_COULEUR 
FROM CASE
INNER JOIN COULEUR ON CASE.ID_COULEUR = COULEUR.ID_COULEUR
ORDER BY COULEUR.NOM_COULEUR ASC
LIMIT 5;
Question 13:
SELECT NOM_JOUEUR, CAGNOTTE.MONTANT_DEPART 
FROM JOUEUR
INNER JOIN GERE ON JOUEUR.ID_JOUEUR = GERE.ID_JOUEUR
INNER JOIN CAGNOTTE ON GERE.ID_CAGNOTTE = CAGNOTTE.ID_CAGNOTTE
WHERE NOM_JOUEUR = 'Abeille'; --il n'y as pas de Monsieur Abeille (dans la db c'est Mouche le nom)--
Question 14:
SELECT NOM_JOUEUR, CASE.NOM_CASE 
FROM JOUEUR
INNER JOIN AVANCE ON JOUEUR.ID_JOUEUR = AVANCE.ID_JOUEUR
INNER JOIN CASE ON AVANCE.ID_CASE = CASE.ID_CASE
INNER JOIN COULEUR ON CASE.ID_COULEUR = COULEUR.ID_COULEUR
WHERE COULEUR.ID_COULEUR = 'Orange';
--Jointures externes--
Question 15:
SELECT NOM_RUE, MAISON.NOM_MAIS, MAISON.PRIX_MAIS
FROM RUE
INNER JOIN MAISON ON RUE.ID_RUE = MAISON.ID_RUE
ORDER BY MAISON.NOM_RUE
LIMIT 27;
Question 16:
SELECT NOM_JOUEUR, STATION.NOM_GARE 
FROM JOUEUR
INNER JOIN STATION ON JOUEUR.ID_JOUEUR = STATION.ID_JOUEUR
ORDER BY NOM_JOUEUR DESC
LIMIT 6;
Question 17:
SELECT NOM_JOUEUR, STATION.NOM_GARE, RUE.NOM_RUE
FROM JOUEUR
INNER JOIN STATION ON JOUEUR.ID_JOUEUR = STATION.ID_JOUEUR
INNER JOIN RUE ON JOUEUR.ID_JOUEUR = RUE.ID_JOUEUR
ORDER BY NOM_JOUEUR DESC
LIMIT 8;
--Requêtes avec regroupement--
Question 18:
SELECT ID_RUE, SUM(MAISON.PRIX_MAIS) AS 'TOTAL' 
FROM RUE
INNER JOIN MAISON ON RUE.ID_RUE = MAISON.ID_RUE
GROUP BY ID_RUE
LIMIT 5;
Question 19:
SELECT NOM_RUE, COUNT(HOTEL.NOM_HOTEL) AS 'TOTAL' 
FROM RUE
INNER JOIN HOTEL ON RUE.ID_RUE = HOTEL.ID_RUE
GROUP BY NOM_RUE;
Question 20:
SELECT NOM_COULEUR, AVG(RUE.PRIX_RUE) AS 'Moyenne du prix' 
FROM COULEUR
INNER JOIN RUE ON COULEUR.ID_COULEUR = RUE.ID_COULEUR
GROUP BY NOM_COULEUR
LIMIT 8;
Question 21:
SELECT SUM(GAINS) AS 'Somme des gains' 
FROM GERE;
Question 22:
SELECT ID_RUE, SUM(MAISON.PRIX_MAIS) AS 'TOTAL' 
FROM RUE
INNER JOIN MAISON ON RUE.ID_RUE = MAISON.ID_RUE
GROUP BY ID_RUE
HAVING SUM(MAISON.PRIX_MAIS) < 6000
LIMIT 2;
--Utilisation de Fonctions--
Question 23:
SELECT NOM_JOUEUR AS 'NOM', GERE.JOUR AS 'JOUR', 'Moyenne dépensée : ' || AVG(GERE.DEPENSES) AS 'Moyenne des dépenses', 'Moyenne gagnée : ' || AVG(GAINS) AS 'Moyenne des gains' 
FROM ID_JOUEUR
INNER JOIN GERE ON JOUEUR.ID_JOUEUR = GERE.ID_JOUEUR;
Questions 24:
SELECT RPAD(NOM_JOUEUR, '20', "-joueur") AS NOUVEAU_NOM 
FROM JOUEUR
LIMIT 6;
--Opérateurs ensemblistes--
Question 25:
SELECT NOM_GARE, PRIX_GARE
FROM STATION
WHERE ID_JOUEUR IS NULL;
Question 26:
 
SELECT ID_PION FROM PION
EXCEPT
SELECT ID_PION FROM AVANCE
SELECT FIGURINE;
--Requêtes imbriquées--
Question 27:
SELECT J.NOM_JOUEUR, A.NOMBRE 
FROM JOUEUR J, AVANCE A
WHERE J.ID_JOUEUR = A.ID_JOUEUR
AND A.NOMBRE > SELECT AVG(NOMBRE) FROM AVANCE;
Question 28:
--IN--
SELECT NOM_GARE, PRIX_GARE 
FROM STATION
WHERE ID_GARE NOT IN (
    SELECT ID_GARE 
    FROM STATION S, JOUEUR J
    WHERE S.ID_JOUEUR = J.ID_JOUEUR
)
--EXISTS--
SELECT NOM_GARE, PRIX_GARE 
FROM STATION
WHERE NOT EXISTS (
    SELECT ID_GARE 
    FROM STATION S, JOUEUR J
    WHERE S.ID_JOUEUR = J.ID_JOUEUR AND S.ID_JOUEUR = S.ID_JOUEUR
);
Question 29:
--IN--
SELECT FIGURINE 
FROM PION
WHERE ID_PION NOT IN (
    SELECT ID_PION 
    FROM PION P, JOUEUR J, AVANCE A
    WHERE A.ID_JOUEUR = J.ID_JOUEUR AND A.ID_PION = P.ID_PION
)
--EXISTS--
SELECT FIGURINE 
FROM PION
WHERE NOT EXISTS (
    SELECT ID_PION 
    FROM PION P, JOUEUR J, AVANCE A
    WHERE A.ID_JOUEUR = J.ID_JOUEUR AND A.ID_PION = P.ID_PION AND P.ID_PION = P.ID_PION
)

